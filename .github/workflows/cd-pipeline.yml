name: CD Pipeline - Blue-Green Deployment

on:
  push:
    branches: [main]
    tags: ['v*']
  workflow_run:
    workflows: ["CI Pipeline - Hybrid Rust-Python RAN LLM"]
    types: [completed]
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/ran-llm-pipeline

jobs:
  # Job 1: Build and Push Container
  build-and-push:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' || github.event_name == 'push'
    permissions:
      contents: read
      packages: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: integrated_pipeline/deployment/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_VERSION=${{ github.sha }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}

  # Job 2: Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-and-push
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup deployment tools
        run: |
          # Install kubectl, helm, etc.
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Configure Kubernetes
        run: |
          echo "${{ secrets.KUBECONFIG_STAGING }}" | base64 -d > kubeconfig
          export KUBECONFIG=./kubeconfig

      - name: Deploy to staging (Blue environment)
        id: deploy
        run: |
          cd integrated_pipeline/deployment
          ./blue-green-deploy.sh \
            --environment staging \
            --image ${{ needs.build-and-push.outputs.image-tag }} \
            --slot blue \
            --namespace ran-llm-staging

      - name: Run staging smoke tests
        run: |
          cd integrated_pipeline
          ./cicd/test-automation.py --mode smoke --environment staging --timeout 300

      - name: Switch traffic to Blue (staging)
        if: success()
        run: |
          cd integrated_pipeline/deployment
          ./switch-traffic.sh --environment staging --target blue

  # Job 3: Production Deployment (Blue-Green)
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-staging]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup deployment tools
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Configure Kubernetes
        run: |
          echo "${{ secrets.KUBECONFIG_PRODUCTION }}" | base64 -d > kubeconfig
          export KUBECONFIG=./kubeconfig

      - name: Determine deployment slot
        id: slot
        run: |
          cd integrated_pipeline/deployment
          CURRENT_SLOT=$(./get-current-slot.sh --environment production)
          if [ "$CURRENT_SLOT" = "blue" ]; then
            echo "target_slot=green" >> $GITHUB_OUTPUT
          else
            echo "target_slot=blue" >> $GITHUB_OUTPUT
          fi

      - name: Deploy to production (target slot)
        id: deploy
        run: |
          cd integrated_pipeline/deployment
          ./blue-green-deploy.sh \
            --environment production \
            --image ${{ needs.build-and-push.outputs.image-tag }} \
            --slot ${{ steps.slot.outputs.target_slot }} \
            --namespace ran-llm-production

      - name: Run production health checks
        run: |
          cd integrated_pipeline
          ./cicd/test-automation.py --mode health --environment production --slot ${{ steps.slot.outputs.target_slot }}

      - name: Performance validation
        run: |
          cd integrated_pipeline
          ./cicd/test-automation.py --mode performance --environment production --target-docs-per-hour 25 --duration 300

      - name: Quality validation
        run: |
          cd integrated_pipeline
          ./cicd/test-automation.py --mode quality --environment production --quality-threshold 0.75 --duration 300

      - name: Switch traffic to new deployment
        if: success()
        run: |
          cd integrated_pipeline/deployment
          ./switch-traffic.sh --environment production --target ${{ steps.slot.outputs.target_slot }}

      - name: Monitor post-deployment metrics
        run: |
          cd integrated_pipeline/deployment
          ./monitor-deployment.sh --environment production --duration 600 --alert-threshold 0.95

  # Job 4: Rollback (if needed)
  rollback:
    runs-on: ubuntu-latest
    needs: deploy-production
    if: failure()
    environment:
      name: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure Kubernetes
        run: |
          echo "${{ secrets.KUBECONFIG_PRODUCTION }}" | base64 -d > kubeconfig
          export KUBECONFIG=./kubeconfig

      - name: Execute automatic rollback
        run: |
          cd integrated_pipeline/deployment
          ./rollback.sh --environment production --reason "deployment-failure" --auto-confirm

      - name: Validate rollback
        run: |
          cd integrated_pipeline
          ./cicd/test-automation.py --mode smoke --environment production --timeout 180

      - name: Notify rollback
        run: |
          echo "üîÑ Automatic rollback executed due to deployment failure"

  # Job 5: Cleanup old deployments
  cleanup:
    runs-on: ubuntu-latest
    needs: deploy-production
    if: success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure Kubernetes
        run: |
          echo "${{ secrets.KUBECONFIG_PRODUCTION }}" | base64 -d > kubeconfig
          export KUBECONFIG=./kubeconfig

      - name: Cleanup old deployments
        run: |
          cd integrated_pipeline/deployment
          ./cleanup-old-deployments.sh --environment production --keep-last 3

      - name: Cleanup old images
        run: |
          cd integrated_pipeline/deployment
          ./cleanup-old-images.sh --registry ${{ env.REGISTRY }} --repository ${{ env.IMAGE_NAME }} --keep-last 5

  # Notification
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-production, cleanup]
    if: always()
    steps:
      - name: Notify on success
        if: needs.deploy-production.result == 'success'
        run: |
          echo "‚úÖ CD Pipeline completed successfully"
          echo "üöÄ Deployment live in production"

      - name: Notify on failure
        if: needs.deploy-production.result != 'success'
        run: |
          echo "‚ùå CD Pipeline failed"
          echo "üîÑ Automatic rollback may have been triggered"