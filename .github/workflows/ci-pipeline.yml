name: CI Pipeline - Hybrid Rust-Python RAN LLM

on:
  push:
    branches: [main, develop, feat/*, fix/*]
  pull_request:
    branches: [main, develop]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"

jobs:
  # Job 1: Code Quality and Security
  code-quality:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

      - name: Rust format check
        run: cargo fmt --all -- --check

      - name: Rust clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Python format check (black)
        run: |
          pip install black isort flake8
          black --check --diff .
          isort --check-only --diff .
          flake8 .

      - name: Security audit - Rust
        run: |
          cargo install cargo-audit
          cargo audit

      - name: Security scan - Python
        run: |
          pip install safety bandit
          safety check
          bandit -r . -f json -o bandit-report.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json
            cargo-audit.log

  # Job 2: Build and Test
  build-test:
    runs-on: ubuntu-latest
    needs: code-quality
    timeout-minutes: 30
    strategy:
      matrix:
        rust-version: [stable]
        python-version: ["3.11"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust ${{ matrix.rust-version }}
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust-version }}

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target/
            ~/.cache/pip
          key: ${{ runner.os }}-build-${{ matrix.rust-version }}-${{ matrix.python-version }}-${{ hashFiles('**/Cargo.lock', '**/requirements.txt') }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config libssl-dev

      - name: Build Rust components
        run: |
          cd integrated_pipeline
          ./cicd/build-scripts.sh rust

      - name: Build Python components
        run: |
          cd integrated_pipeline
          ./cicd/build-scripts.sh python

      - name: Run Rust tests
        run: |
          cd integrated_pipeline
          cargo test --verbose --all-features
          cargo test --release --all-features

      - name: Run Python tests
        run: |
          cd integrated_pipeline
          python -m pytest tests/ -v --cov=. --cov-report=xml --cov-report=html

      - name: Integration tests
        run: |
          cd integrated_pipeline
          ./cicd/test-automation.py --mode integration

      - name: Performance benchmarks
        run: |
          cd integrated_pipeline
          ./cicd/test-automation.py --mode performance --target-docs-per-hour 25

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.rust-version }}-${{ matrix.python-version }}
          path: |
            integrated_pipeline/target/coverage/
            integrated_pipeline/coverage.xml
            integrated_pipeline/htmlcov/
            integrated_pipeline/benchmark-results.json

  # Job 3: Container Build and Security Scan
  container-security:
    runs-on: ubuntu-latest
    needs: build-test
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build container image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: integrated_pipeline/deployment/Dockerfile
          push: false
          tags: ran-llm-pipeline:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ran-llm-pipeline:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Job 4: End-to-End Testing
  e2e-testing:
    runs-on: ubuntu-latest
    needs: [build-test, container-security]
    timeout-minutes: 45
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup test environment
        run: |
          cd integrated_pipeline
          ./deployment/setup-test-env.sh

      - name: Run E2E tests
        run: |
          cd integrated_pipeline
          ./cicd/test-automation.py --mode e2e --quality-threshold 0.75

      - name: Test IPC communication
        run: |
          cd integrated_pipeline
          ./cicd/test-automation.py --mode ipc --latency-threshold 100

      - name: Cleanup test environment
        if: always()
        run: |
          cd integrated_pipeline
          ./deployment/cleanup-test-env.sh

  # Job 5: Quality Gates
  quality-gates:
    runs-on: ubuntu-latest
    needs: [code-quality, build-test, container-security, e2e-testing]
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download test artifacts
        uses: actions/download-artifact@v3

      - name: Validate quality metrics
        run: |
          cd integrated_pipeline
          ./cicd/quality-gates.py --coverage-threshold 80 --performance-threshold 25 --quality-threshold 0.75

      - name: Generate quality report
        run: |
          cd integrated_pipeline
          ./cicd/generate-quality-report.py --output-format json --output-file quality-report.json

      - name: Upload quality report
        uses: actions/upload-artifact@v3
        with:
          name: quality-report
          path: integrated_pipeline/quality-report.json

  # Notification
  notify:
    runs-on: ubuntu-latest
    needs: [quality-gates]
    if: always()
    steps:
      - name: Notify on success
        if: needs.quality-gates.result == 'success'
        run: echo "✅ CI Pipeline completed successfully"

      - name: Notify on failure
        if: needs.quality-gates.result != 'success'
        run: |
          echo "❌ CI Pipeline failed"
          exit 1