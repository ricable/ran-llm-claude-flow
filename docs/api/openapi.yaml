openapi: 3.0.0
info:
  title: RAN-LLM Hybrid Pipeline API
  version: 1.0.0
  description: |
    Ultra-high-performance hybrid Rust-Python pipeline for RAN document processing.
    Optimized for MacBook Pro M3 Max with 128GB unified memory achieving 4-5x 
    performance improvement and >0.742 quality score consistency.
    
    ## Architecture Overview
    
    The API provides access to a hybrid pipeline system with:
    - **Rust Core**: High-performance I/O processing and document handling
    - **Python ML Workers**: Qwen3 model inference and quality scoring
    - **MCP Protocol**: Inter-process communication and coordination
    - **M3 Max Optimization**: Hardware-specific performance tuning
    
    ## Performance Targets
    
    - **Document Throughput**: 20-30 documents/hour (4-5x improvement)
    - **Memory Efficiency**: 85-95% utilization of 128GB unified memory
    - **Model Switching**: <5 second latency between Qwen3 variants
    - **Quality Consistency**: >0.742 quality score with Â±0.05 variance
    - **Error Rate**: <2% processing failures
    
  contact:
    name: RAN-LLM Pipeline Support
    url: https://github.com/ricable/ran-llm-claude-flow
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8700
    description: Local development server
  - url: https://api.ran-llm.example.com
    description: Production server

security:
  - bearerAuth: []
  - apiKeyAuth: []

paths:
  # Pipeline Management Endpoints
  /api/v1/pipeline:
    post:
      tags:
        - Pipeline Management
      summary: Create and start document processing pipeline
      description: |
        Creates a new processing pipeline with specified configuration and begins
        document processing. Supports batch processing with configurable quality
        thresholds and M3 Max optimization settings.
      operationId: createPipeline
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PipelineCreateRequest'
            example:
              name: "Ericsson RAN Document Processing"
              input_path: "./data/documents"
              output_path: "./output/processed"
              quality_threshold: 0.742
              model_strategy: "adaptive"
              batch_size: 100
              m3_max_optimization: true
              stages:
                - "document_conversion"
                - "preprocessing"
                - "langextract"
                - "conversation_generation"
                - "finalization"
      responses:
        '201':
          description: Pipeline created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PipelineResponse'
              example:
                pipeline_id: "pl_7d4c9b2a1e8f"
                status: "created"
                estimated_duration: 3600
                estimated_throughput: 25
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/v1/pipeline/{pipeline_id}:
    get:
      tags:
        - Pipeline Management
      summary: Get pipeline status and metrics
      description: |
        Retrieves current status, progress metrics, and performance data for
        a specific pipeline execution.
      operationId: getPipelineStatus
      parameters:
        - name: pipeline_id
          in: path
          required: true
          schema:
            type: string
          example: "pl_7d4c9b2a1e8f"
      responses:
        '200':
          description: Pipeline status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PipelineStatus'
              example:
                pipeline_id: "pl_7d4c9b2a1e8f"
                status: "running"
                progress: 45.2
                documents_processed: 1130
                documents_total: 2500
                current_stage: "langextract"
                quality_score_avg: 0.748
                throughput_current: 28.5
                memory_usage_gb: 89.2
                estimated_completion: "2024-08-23T12:45:00Z"
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - Pipeline Management
      summary: Stop and cleanup pipeline
      description: |
        Gracefully stops a running pipeline, cleans up resources, and provides
        final processing statistics.
      operationId: stopPipeline
      parameters:
        - name: pipeline_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Pipeline stopped successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PipelineStopResponse'
        '404':
          $ref: '#/components/responses/NotFound'

  # Document Processing Endpoints
  /api/v1/documents/process:
    post:
      tags:
        - Document Processing
      summary: Process single document
      description: |
        Processes a single document through the complete pipeline with real-time
        quality scoring and model selection optimization.
      operationId: processDocument
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: Document file to process
                config:
                  type: string
                  description: JSON configuration for processing
            example:
              config: |
                {
                  "quality_threshold": 0.742,
                  "model_preference": "qwen3_7b",
                  "extract_categories": ["features", "parameters", "procedures"],
                  "generate_conversations": true
                }
      responses:
        '200':
          description: Document processed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentProcessingResult'
              example:
                document_id: "doc_a1b2c3d4"
                status: "completed"
                processing_time_ms: 15420
                quality_score: 0.756
                extractions:
                  features: 12
                  parameters: 45
                  procedures: 8
                conversations_generated: 15
                model_used: "qwen3_7b"
                memory_peak_mb: 2840

  /api/v1/documents/{document_id}:
    get:
      tags:
        - Document Processing
      summary: Get document processing result
      description: |
        Retrieves the complete processing result for a document including
        extractions, generated conversations, and quality metrics.
      operationId: getDocumentResult
      parameters:
        - name: document_id
          in: path
          required: true
          schema:
            type: string
        - name: format
          in: query
          description: Response format
          schema:
            type: string
            enum: [json, jsonl, csv]
            default: json
      responses:
        '200':
          description: Document result retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentResult'
            application/jsonl:
              schema:
                type: string
                description: JSONL formatted result
            text/csv:
              schema:
                type: string
                description: CSV formatted result

  # Model Management Endpoints
  /api/v1/models:
    get:
      tags:
        - Model Management
      summary: List available models
      description: |
        Lists all available Qwen3 model variants with their current status,
        memory usage, and performance characteristics.
      operationId: listModels
      responses:
        '200':
          description: Models listed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  models:
                    type: array
                    items:
                      $ref: '#/components/schemas/ModelInfo'
              example:
                models:
                  - model_id: "qwen3_1_7b"
                    name: "Qwen3 1.7B"
                    status: "loaded"
                    memory_usage_gb: 8.2
                    target_throughput: 2000
                    use_cases: ["embedding", "simple_extraction"]
                  - model_id: "qwen3_7b"
                    name: "Qwen3 7B"
                    status: "loaded"
                    memory_usage_gb: 24.8
                    target_throughput: 300
                    use_cases: ["balanced_processing", "conversation_generation"]
                  - model_id: "qwen3_30b"
                    name: "Qwen3 30B"
                    status: "available"
                    memory_usage_gb: 0
                    target_throughput: 100
                    use_cases: ["complex_analysis", "quality_assessment"]

  /api/v1/models/{model_id}/load:
    post:
      tags:
        - Model Management
      summary: Load model into memory
      description: |
        Loads a specific Qwen3 model variant into memory with M3 Max optimization.
        Supports preloading and memory pool allocation strategies.
      operationId: loadModel
      parameters:
        - name: model_id
          in: path
          required: true
          schema:
            type: string
            enum: [qwen3_1_7b, qwen3_7b, qwen3_30b]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                memory_strategy:
                  type: string
                  enum: [eager, lazy, adaptive]
                  default: adaptive
                priority:
                  type: string
                  enum: [low, normal, high]
                  default: normal
      responses:
        '200':
          description: Model loaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelLoadResponse'

  /api/v1/models/{model_id}/unload:
    post:
      tags:
        - Model Management
      summary: Unload model from memory
      description: |
        Unloads a model from memory to free up resources for other models or
        processing tasks. Supports graceful shutdown with active request completion.
      operationId: unloadModel
      parameters:
        - name: model_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Model unloaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  memory_freed_gb:
                    type: number
                    format: float

  # Monitoring and Metrics Endpoints  
  /api/v1/metrics:
    get:
      tags:
        - Monitoring
      summary: Get system performance metrics
      description: |
        Retrieves comprehensive system metrics including CPU, memory, GPU,
        Neural Engine utilization, and pipeline performance indicators.
      operationId: getMetrics
      parameters:
        - name: timeframe
          in: query
          description: Metrics timeframe
          schema:
            type: string
            enum: [current, 5m, 15m, 1h, 4h]
            default: current
      responses:
        '200':
          description: Metrics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemMetrics'
              example:
                timestamp: "2024-08-23T10:30:00Z"
                system:
                  cpu_utilization: 72.5
                  memory_total_gb: 128
                  memory_used_gb: 89.2
                  memory_available_gb: 38.8
                  gpu_utilization: 45.2
                  neural_engine_utilization: 68.7
                pipeline:
                  documents_per_hour: 28.5
                  avg_processing_time_ms: 1850
                  quality_score_avg: 0.748
                  error_rate: 0.015
                models:
                  qwen3_1_7b: 
                    inference_time_ms: 120
                    memory_usage_gb: 8.2
                  qwen3_7b:
                    inference_time_ms: 480
                    memory_usage_gb: 24.8

  /api/v1/health:
    get:
      tags:
        - Monitoring
      summary: Health check endpoint
      description: |
        Comprehensive health check including system resources, model availability,
        and pipeline component status.
      operationId: healthCheck
      responses:
        '200':
          description: System healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'
              example:
                status: "healthy"
                uptime_seconds: 86400
                components:
                  rust_core: "healthy"
                  python_workers: "healthy"
                  mcp_protocol: "healthy"
                  models: "healthy"
                  memory_pools: "healthy"
                checks:
                  - name: "memory_availability"
                    status: "pass"
                    details: "89.2GB used, 38.8GB available"
                  - name: "model_responsiveness"
                    status: "pass"
                    details: "All models responding within SLA"
        '503':
          description: System unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    apiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key

  schemas:
    PipelineCreateRequest:
      type: object
      required:
        - name
        - input_path
        - output_path
      properties:
        name:
          type: string
          description: Pipeline name
          example: "Ericsson RAN Document Processing"
        input_path:
          type: string
          description: Input directory path
          example: "./data/documents"
        output_path:
          type: string
          description: Output directory path
          example: "./output/processed"
        quality_threshold:
          type: number
          format: float
          minimum: 0.0
          maximum: 1.0
          default: 0.742
          description: Minimum quality score threshold
        model_strategy:
          type: string
          enum: [adaptive, qwen3_1_7b, qwen3_7b, qwen3_30b]
          default: adaptive
          description: Model selection strategy
        batch_size:
          type: integer
          minimum: 1
          maximum: 1000
          default: 100
          description: Documents per processing batch
        m3_max_optimization:
          type: boolean
          default: true
          description: Enable M3 Max hardware optimization
        stages:
          type: array
          items:
            type: string
            enum:
              - document_conversion
              - preprocessing
              - langextract
              - conversation_generation
              - finalization
          description: Processing stages to execute

    PipelineResponse:
      type: object
      properties:
        pipeline_id:
          type: string
          description: Unique pipeline identifier
        status:
          type: string
          enum: [created, starting, running, completed, failed, stopped]
        estimated_duration:
          type: integer
          description: Estimated processing duration in seconds
        estimated_throughput:
          type: number
          format: float
          description: Estimated documents per hour

    PipelineStatus:
      type: object
      properties:
        pipeline_id:
          type: string
        status:
          type: string
          enum: [created, starting, running, completed, failed, stopped]
        progress:
          type: number
          format: float
          minimum: 0.0
          maximum: 100.0
          description: Processing progress percentage
        documents_processed:
          type: integer
          description: Number of documents processed
        documents_total:
          type: integer
          description: Total number of documents
        current_stage:
          type: string
          description: Currently executing stage
        quality_score_avg:
          type: number
          format: float
          description: Average quality score
        throughput_current:
          type: number
          format: float
          description: Current documents per hour
        memory_usage_gb:
          type: number
          format: float
          description: Current memory usage in GB
        estimated_completion:
          type: string
          format: date-time
          description: Estimated completion time
        stages:
          type: array
          items:
            $ref: '#/components/schemas/StageStatus'

    StageStatus:
      type: object
      properties:
        stage_name:
          type: string
        status:
          type: string
          enum: [pending, running, completed, failed]
        progress:
          type: number
          format: float
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
        duration_ms:
          type: integer
        error_message:
          type: string

    DocumentProcessingResult:
      type: object
      properties:
        document_id:
          type: string
        status:
          type: string
          enum: [completed, failed, processing]
        processing_time_ms:
          type: integer
        quality_score:
          type: number
          format: float
        extractions:
          type: object
          properties:
            features:
              type: integer
            parameters:
              type: integer
            procedures:
              type: integer
            troubleshooting:
              type: integer
            specifications:
              type: integer
            examples:
              type: integer
        conversations_generated:
          type: integer
        model_used:
          type: string
        memory_peak_mb:
          type: number
          format: float
        error_details:
          type: string

    DocumentResult:
      type: object
      properties:
        document_id:
          type: string
        metadata:
          $ref: '#/components/schemas/DocumentMetadata'
        extractions:
          type: array
          items:
            $ref: '#/components/schemas/Extraction'
        conversations:
          type: array
          items:
            $ref: '#/components/schemas/Conversation'
        quality_metrics:
          $ref: '#/components/schemas/QualityMetrics'

    DocumentMetadata:
      type: object
      properties:
        original_filename:
          type: string
        file_size_bytes:
          type: integer
        file_type:
          type: string
        processing_timestamp:
          type: string
          format: date-time
        language:
          type: string
        encoding:
          type: string

    Extraction:
      type: object
      properties:
        category:
          type: string
          enum: [features, parameters, procedures, troubleshooting, specifications, examples]
        content:
          type: string
        confidence_score:
          type: number
          format: float
        source_location:
          type: string
        metadata:
          type: object

    Conversation:
      type: object
      properties:
        conversation_id:
          type: string
        turns:
          type: array
          items:
            $ref: '#/components/schemas/ConversationTurn'
        quality_score:
          type: number
          format: float
        generated_by:
          type: string

    ConversationTurn:
      type: object
      properties:
        role:
          type: string
          enum: [user, assistant]
        content:
          type: string
        metadata:
          type: object

    QualityMetrics:
      type: object
      properties:
        overall_score:
          type: number
          format: float
        completeness_score:
          type: number
          format: float
        accuracy_score:
          type: number
          format: float
        consistency_score:
          type: number
          format: float
        technical_depth_score:
          type: number
          format: float

    ModelInfo:
      type: object
      properties:
        model_id:
          type: string
        name:
          type: string
        status:
          type: string
          enum: [available, loading, loaded, unloading, error]
        memory_usage_gb:
          type: number
          format: float
        target_throughput:
          type: integer
          description: Target items per minute
        use_cases:
          type: array
          items:
            type: string
        load_time_ms:
          type: integer
        last_used:
          type: string
          format: date-time

    ModelLoadResponse:
      type: object
      properties:
        model_id:
          type: string
        status:
          type: string
        load_time_ms:
          type: integer
        memory_allocated_gb:
          type: number
          format: float
        ready_for_inference:
          type: boolean

    SystemMetrics:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        system:
          $ref: '#/components/schemas/SystemResourceMetrics'
        pipeline:
          $ref: '#/components/schemas/PipelineMetrics'
        models:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ModelMetrics'

    SystemResourceMetrics:
      type: object
      properties:
        cpu_utilization:
          type: number
          format: float
          description: CPU utilization percentage
        memory_total_gb:
          type: number
          format: float
        memory_used_gb:
          type: number
          format: float
        memory_available_gb:
          type: number
          format: float
        gpu_utilization:
          type: number
          format: float
        neural_engine_utilization:
          type: number
          format: float
        disk_io_mb_per_sec:
          type: number
          format: float
        network_io_mb_per_sec:
          type: number
          format: float

    PipelineMetrics:
      type: object
      properties:
        documents_per_hour:
          type: number
          format: float
        avg_processing_time_ms:
          type: integer
        quality_score_avg:
          type: number
          format: float
        error_rate:
          type: number
          format: float
        active_pipelines:
          type: integer
        queued_documents:
          type: integer

    ModelMetrics:
      type: object
      properties:
        inference_time_ms:
          type: integer
        memory_usage_gb:
          type: number
          format: float
        requests_per_minute:
          type: number
          format: float
        error_rate:
          type: number
          format: float
        queue_size:
          type: integer

    HealthStatus:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
        uptime_seconds:
          type: integer
        components:
          type: object
          additionalProperties:
            type: string
            enum: [healthy, degraded, unhealthy]
        checks:
          type: array
          items:
            $ref: '#/components/schemas/HealthCheck'

    HealthCheck:
      type: object
      properties:
        name:
          type: string
        status:
          type: string
          enum: [pass, fail, warn]
        details:
          type: string
        response_time_ms:
          type: integer

    PipelineStopResponse:
      type: object
      properties:
        pipeline_id:
          type: string
        status:
          type: string
        final_stats:
          type: object
          properties:
            documents_processed:
              type: integer
            total_processing_time_ms:
              type: integer
            avg_quality_score:
              type: number
              format: float
            memory_peak_gb:
              type: number
              format: float

    Error:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        details:
          type: string
        timestamp:
          type: string
          format: date-time
        trace_id:
          type: string

  responses:
    BadRequest:
      description: Invalid request parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "validation_error"
            message: "Invalid quality threshold value"
            details: "Quality threshold must be between 0.0 and 1.0"
            timestamp: "2024-08-23T10:30:00Z"
            trace_id: "tr_a1b2c3d4e5f6"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "not_found"
            message: "Pipeline not found"
            details: "No pipeline found with ID: pl_invalid"
            timestamp: "2024-08-23T10:30:00Z"
            trace_id: "tr_g7h8i9j0k1l2"

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "internal_error"
            message: "Pipeline creation failed"
            details: "Failed to initialize Rust processing core"
            timestamp: "2024-08-23T10:30:00Z"
            trace_id: "tr_m3n4o5p6q7r8"

tags:
  - name: Pipeline Management
    description: Create, monitor, and manage document processing pipelines
  - name: Document Processing
    description: Process individual documents and retrieve results
  - name: Model Management
    description: Manage Qwen3 model variants and memory allocation
  - name: Monitoring
    description: System health, metrics, and performance monitoring