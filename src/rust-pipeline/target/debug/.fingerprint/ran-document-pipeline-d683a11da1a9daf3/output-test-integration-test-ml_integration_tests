{"$message_type":"diagnostic","message":"unused imports: `PipelineConfig` and `Result`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"tests/ml_integration_tests.rs","byte_start":246,"byte_end":252,"line_start":9,"line_end":9,"column_start":29,"column_end":35,"is_primary":true,"text":[{"text":"use ran_document_pipeline::{Result, PipelineConfig};","highlight_start":29,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"tests/ml_integration_tests.rs","byte_start":254,"byte_end":268,"line_start":9,"line_end":9,"column_start":37,"column_end":51,"is_primary":true,"text":[{"text":"use ran_document_pipeline::{Result, PipelineConfig};","highlight_start":37,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"tests/ml_integration_tests.rs","byte_start":218,"byte_end":271,"line_start":9,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use ran_document_pipeline::{Result, PipelineConfig};","highlight_start":1,"highlight_end":53},{"text":"use std::time::Duration;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `PipelineConfig` and `Result`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/ml_integration_tests.rs:9:29\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse ran_document_pipeline::{Result, PipelineConfig};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`*mut ()` cannot be sent between threads safely","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"tests/ml_integration_tests.rs","byte_start":10373,"byte_end":10527,"line_start":254,"line_end":259,"column_start":22,"column_end":11,"is_primary":true,"text":[{"text":"        let handle = tokio::spawn({","highlight_start":22,"highlight_end":36},{"text":"            let request = request.clone();","highlight_start":1,"highlight_end":43},{"text":"            async move {","highlight_start":1,"highlight_end":25},{"text":"                process_request(request).await","highlight_start":1,"highlight_end":47},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        });","highlight_start":1,"highlight_end":11}],"label":"`*mut ()` cannot be sent between threads safely","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"tests/ml_integration_tests.rs","byte_start":10443,"byte_end":10453,"line_start":256,"line_end":256,"column_start":13,"column_end":23,"is_primary":false,"text":[{"text":"            async move {","highlight_start":13,"highlight_end":23}],"label":"within this `{async block@tests/ml_integration_tests.rs:256:13: 256:23}`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"within `{async block@tests/ml_integration_tests.rs:256:13: 256:23}`, the trait `std::marker::Send` is not implemented for `*mut ()`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required because it appears within the type `lock_api::GuardNoSend`","code":null,"level":"note","spans":[{"file_name":"/Users/cedric/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/lock_api-0.4.13/src/lib.rs","byte_start":3996,"byte_end":4007,"line_start":104,"line_end":104,"column_start":12,"column_end":23,"is_primary":true,"text":[{"text":"pub struct GuardNoSend(*mut ());","highlight_start":12,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required because it appears within the type `(&mut m3_max::AllocationTracker, lock_api::GuardNoSend)`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required because it appears within the type `PhantomData<(&mut m3_max::AllocationTracker, lock_api::GuardNoSend)>`","code":null,"level":"note","spans":[{"file_name":"/Users/cedric/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/marker.rs","byte_start":29503,"byte_end":29514,"line_start":774,"line_end":774,"column_start":12,"column_end":23,"is_primary":true,"text":[{"text":"pub struct PhantomData<T: ?Sized>;","highlight_start":12,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required because it appears within the type `lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, m3_max::AllocationTracker>`","code":null,"level":"note","spans":[{"file_name":"/Users/cedric/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/lock_api-0.4.13/src/mutex.rs","byte_start":17304,"byte_end":17314,"line_start":504,"line_end":504,"column_start":12,"column_end":22,"is_primary":true,"text":[{"text":"pub struct MutexGuard<'a, R: RawMutex, T: ?Sized> {","highlight_start":12,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required because it's used within this `async` fn body","code":null,"level":"note","spans":[{"file_name":"/Users/cedric/orange/ran-llm-claude-flow/src/rust-pipeline/src/optimization/m3_max.rs","byte_start":11584,"byte_end":13395,"line_start":348,"line_end":392,"column_start":58,"column_end":6,"is_primary":true,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required because it's used within this `async` fn body","code":null,"level":"note","spans":[{"file_name":"/Users/cedric/orange/ran-llm-claude-flow/src/rust-pipeline/src/ml/model_selector.rs","byte_start":19349,"byte_end":20348,"line_start":494,"line_end":516,"column_start":61,"column_end":6,"is_primary":true,"text":[{"text":"    async fn get_system_state(&self) -> Result<SystemState> {","highlight_start":61,"highlight_end":1},{"text":"        let (available_memory_gb, memory_usage, cpu_usage) = if let Some(ref memory_manager) = self.memory_manager {","highlight_start":1,"highlight_end":1},{"text":"            let stats = memory_manager.get_stats().await?;","highlight_start":1,"highlight_end":1},{"text":"            let total_memory = memory_manager.get_system_info().total_memory_gb as f64;","highlight_start":1,"highlight_end":1},{"text":"            let used_memory = stats.total_allocated_bytes as f64 / (1024.0 * 1024.0 * 1024.0);","highlight_start":1,"highlight_end":1},{"text":"            let available = total_memory - used_memory;","highlight_start":1,"highlight_end":1},{"text":"            let memory_usage = used_memory / total_memory;","highlight_start":1,"highlight_end":1},{"text":"            let cpu_usage = stats.system_metrics.cpu_usage_percent / 100.0;","highlight_start":1,"highlight_end":1},{"text":"            ","highlight_start":1,"highlight_end":1},{"text":"            (available as u32, memory_usage, cpu_usage)","highlight_start":1,"highlight_end":1},{"text":"        } else {","highlight_start":1,"highlight_end":1},{"text":"            // Fallback system detection","highlight_start":1,"highlight_end":1},{"text":"            (64, 0.5, 0.3) // Conservative estimates","highlight_start":1,"highlight_end":1},{"text":"        };","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        Ok(SystemState {","highlight_start":1,"highlight_end":1},{"text":"            available_memory_gb,","highlight_start":1,"highlight_end":1},{"text":"            memory_usage,","highlight_start":1,"highlight_end":1},{"text":"            cpu_usage,","highlight_start":1,"highlight_end":1},{"text":"            gpu_usage: 0.0, // TODO: Add GPU monitoring","highlight_start":1,"highlight_end":1},{"text":"            neural_engine_usage: 0.0, // TODO: Add Neural Engine monitoring","highlight_start":1,"highlight_end":1},{"text":"        })","highlight_start":1,"highlight_end":1},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required because it's used within this `async` fn body","code":null,"level":"note","spans":[{"file_name":"/Users/cedric/orange/ran-llm-claude-flow/src/rust-pipeline/src/ml/model_selector.rs","byte_start":5299,"byte_end":6709,"line_start":158,"line_end":195,"column_start":29,"column_end":6,"is_primary":true,"text":[{"text":"    ) -> Result<Qwen3Model> {","highlight_start":29,"highlight_end":30},{"text":"        let start_time = Instant::now();","highlight_start":1,"highlight_end":41},{"text":"        self.total_selections.fetch_add(1, Ordering::Relaxed);","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        debug!(\"Starting model selection for request {}\", request.request_id);","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // Get current system state","highlight_start":1,"highlight_end":36},{"text":"        let system_state = self.get_system_state().await?;","highlight_start":1,"highlight_end":59},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        // Generate predictions for all models","highlight_start":1,"highlight_end":47},{"text":"        let predictions = self.generate_model_predictions(request, workload, &system_state).await?;","highlight_start":1,"highlight_end":100},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        // Select best model based on criteria","highlight_start":1,"highlight_end":47},{"text":"        let selection_result = self.evaluate_and_select(predictions, &system_state).await?;","highlight_start":1,"highlight_end":92},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        // Record selection history","highlight_start":1,"highlight_end":36},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            let mut history = self.selection_history.lock();","highlight_start":1,"highlight_end":61},{"text":"            history.push(selection_result.clone());","highlight_start":1,"highlight_end":52},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"            // Keep only last 1000 selections","highlight_start":1,"highlight_end":46},{"text":"            if history.len() > 1000 {","highlight_start":1,"highlight_end":38},{"text":"                history.drain(0..100); // Remove oldest 100","highlight_start":1,"highlight_end":60},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // Update performance tracking","highlight_start":1,"highlight_end":39},{"text":"        self.update_selection_tracking(&selection_result.selected_model).await?;","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let selection_time = start_time.elapsed();","highlight_start":1,"highlight_end":51},{"text":"        info!(\"Selected model {} for request {} in {}ms - Reason: {}\", ","highlight_start":1,"highlight_end":72},{"text":"              selection_result.selected_model.name(),","highlight_start":1,"highlight_end":54},{"text":"              request.request_id,","highlight_start":1,"highlight_end":34},{"text":"              selection_time.as_millis(),","highlight_start":1,"highlight_end":42},{"text":"              selection_result.selection_reason);","highlight_start":1,"highlight_end":50},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        Ok(selection_result.selected_model)","highlight_start":1,"highlight_end":44},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required because it's used within this `async` fn body","code":null,"level":"note","spans":[{"file_name":"/Users/cedric/orange/ran-llm-claude-flow/src/rust-pipeline/src/ml/model_selector.rs","byte_start":25361,"byte_end":25560,"line_start":644,"line_end":649,"column_start":99,"column_end":2,"is_primary":true,"text":[{"text":"pub async fn select_model(request: &MLRequest, workload: &WorkloadAnalysis) -> Result<Qwen3Model> {","highlight_start":99,"highlight_end":100},{"text":"    let selector = MODEL_SELECTOR.get()","highlight_start":1,"highlight_end":40},{"text":"        .ok_or_else(|| PipelineError::Optimization(\"Model selector not initialized\".to_string()))?;","highlight_start":1,"highlight_end":100},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"    selector.select_model(request, workload).await","highlight_start":1,"highlight_end":51},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required because it's used within this `async` fn body","code":null,"level":"note","spans":[{"file_name":"/Users/cedric/orange/ran-llm-claude-flow/src/rust-pipeline/src/ml/mod.rs","byte_start":6383,"byte_end":7131,"line_start":228,"line_end":249,"column_start":72,"column_end":2,"is_primary":true,"text":[{"text":"pub async fn process_request(request: MLRequest) -> Result<MLResponse> {","highlight_start":72,"highlight_end":1},{"text":"    let start_time = SystemTime::now();","highlight_start":1,"highlight_end":1},{"text":"    ","highlight_start":1,"highlight_end":1},{"text":"    tracing::debug!(\"Processing ML request: {:?}\", request.request_id);","highlight_start":1,"highlight_end":1},{"text":"    ","highlight_start":1,"highlight_end":1},{"text":"    // Analyze workload to determine optimal model","highlight_start":1,"highlight_end":1},{"text":"    let workload = workload_analyzer::analyze(&request).await?;","highlight_start":1,"highlight_end":1},{"text":"    ","highlight_start":1,"highlight_end":1},{"text":"    // Select optimal model based on workload analysis","highlight_start":1,"highlight_end":1},{"text":"    let selected_model = model_selector::select_model(&request, &workload).await?;","highlight_start":1,"highlight_end":1},{"text":"    ","highlight_start":1,"highlight_end":1},{"text":"    tracing::info!(\"Selected model {} for request {}\",","highlight_start":1,"highlight_end":1},{"text":"                  selected_model.name(), request.request_id);","highlight_start":1,"highlight_end":1},{"text":"    ","highlight_start":1,"highlight_end":1},{"text":"    // Process request with selected model","highlight_start":1,"highlight_end":1},{"text":"    let response = execute_ml_processing(request, selected_model, start_time).await?;","highlight_start":1,"highlight_end":1},{"text":"    ","highlight_start":1,"highlight_end":1},{"text":"    // Update model metrics","highlight_start":1,"highlight_end":1},{"text":"    model_selector::update_metrics(&response).await?;","highlight_start":1,"highlight_end":1},{"text":"    ","highlight_start":1,"highlight_end":1},{"text":"    Ok(response)","highlight_start":1,"highlight_end":1},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required because it's used within this `async` block","code":null,"level":"note","spans":[{"file_name":"tests/ml_integration_tests.rs","byte_start":10443,"byte_end":10453,"line_start":256,"line_end":256,"column_start":13,"column_end":23,"is_primary":true,"text":[{"text":"            async move {","highlight_start":13,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required by a bound in `tokio::spawn`","code":null,"level":"note","spans":[{"file_name":"/Users/cedric/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.47.1/src/task/spawn.rs","byte_start":5224,"byte_end":5229,"line_start":166,"line_end":166,"column_start":12,"column_end":17,"is_primary":false,"text":[{"text":"    pub fn spawn<F>(future: F) -> JoinHandle<F::Output>","highlight_start":12,"highlight_end":17}],"label":"required by a bound in this function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/cedric/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.47.1/src/task/spawn.rs","byte_start":5299,"byte_end":5303,"line_start":168,"line_end":168,"column_start":21,"column_end":25,"is_primary":true,"text":[{"text":"        F: Future + Send + 'static,","highlight_start":21,"highlight_end":25}],"label":"required by this bound in `spawn`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/Users/cedric/orange/ran-llm-claude-flow/src/rust-pipeline/target/debug/deps/ml_integration_tests-d683a11da1a9daf3.long-type-7327994763726328573.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: `*mut ()` cannot be sent between threads safely\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/ml_integration_tests.rs:254:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m254\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        let handle = tokio::spawn({\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m ______________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m255\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let request = request.clone();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m256\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            async move {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mwithin this `{async block@tests/ml_integration_tests.rs:256:13: 256:23}`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m257\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                process_request(request).await\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m258\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m259\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        });\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|__________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`*mut ()` cannot be sent between threads safely\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: within `{async block@tests/ml_integration_tests.rs:256:13: 256:23}`, the trait `std::marker::Send` is not implemented for `*mut ()`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required because it appears within the type `lock_api::GuardNoSend`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/cedric/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/lock_api-0.4.13/src/lib.rs:104:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m104\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct GuardNoSend(*mut ());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because it appears within the type `(&mut m3_max::AllocationTracker, lock_api::GuardNoSend)`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required because it appears within the type `PhantomData<(&mut m3_max::AllocationTracker, lock_api::GuardNoSend)>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/cedric/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/marker.rs:774:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m774\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct PhantomData<T: ?Sized>;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required because it appears within the type `lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, m3_max::AllocationTracker>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/cedric/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/lock_api-0.4.13/src/mutex.rs:504:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m504\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct MutexGuard<'a, R: RawMutex, T: ?Sized> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required because it's used within this `async` fn body\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/cedric/orange/ran-llm-claude-flow/src/rust-pipeline/src/optimization/m3_max.rs:348:58\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required because it's used within this `async` fn body\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/cedric/orange/ran-llm-claude-flow/src/rust-pipeline/src/ml/model_selector.rs:494:61\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m494\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    async fn get_system_state(&self) -> Result<SystemState> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m _____________________________________________________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m495\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let (available_memory_gb, memory_usage, cpu_usage) = if let Some(ref memory_manager) = self.memory_manager {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m496\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let stats = memory_manager.get_stats().await?;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m497\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let total_memory = memory_manager.get_system_info().total_memory_gb as f64;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m515\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        })\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m516\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|_____^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required because it's used within this `async` fn body\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/cedric/orange/ran-llm-claude-flow/src/rust-pipeline/src/ml/model_selector.rs:158:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m158\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    ) -> Result<Qwen3Model> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m _____________________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m159\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let start_time = Instant::now();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m160\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        self.total_selections.fetch_add(1, Ordering::Relaxed);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m194\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Ok(selection_result.selected_model)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m195\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|_____^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required because it's used within this `async` fn body\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/cedric/orange/ran-llm-claude-flow/src/rust-pipeline/src/ml/model_selector.rs:644:99\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m644\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub async fn select_model(request: &MLRequest, workload: &WorkloadAnalysis) -> Result<Qwen3Model> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m ___________________________________________________________________________________________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m645\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let selector = MODEL_SELECTOR.get()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m646\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .ok_or_else(|| PipelineError::Optimization(\"Model selector not initialized\".to_string()))?;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m649\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|_^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required because it's used within this `async` fn body\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/cedric/orange/ran-llm-claude-flow/src/rust-pipeline/src/ml/mod.rs:228:72\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m228\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub async fn process_request(request: MLRequest) -> Result<MLResponse> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m ________________________________________________________________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m229\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let start_time = SystemTime::now();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m230\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m231\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    tracing::debug!(\"Processing ML request: {:?}\", request.request_id);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m248\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Ok(response)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m249\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|_^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required because it's used within this `async` block\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/ml_integration_tests.rs:256:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m256\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            async move {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `tokio::spawn`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/cedric/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.47.1/src/task/spawn.rs:168:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m166\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn spawn<F>(future: F) -> JoinHandle<F::Output>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m167\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    where\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m168\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        F: Future + Send + 'static,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `spawn`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/Users/cedric/orange/ran-llm-claude-flow/src/rust-pipeline/target/debug/deps/ml_integration_tests-d683a11da1a9daf3.long-type-7327994763726328573.txt'\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 1 previous error; 1 warning emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 1 previous error; 1 warning emitted\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"For more information about this error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0277`.\u001b[0m\n"}
